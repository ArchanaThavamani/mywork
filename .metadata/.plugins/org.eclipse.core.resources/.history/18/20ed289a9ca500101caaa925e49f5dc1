package com.arizon.racetrac.controller;

import java.io.IOException;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.Channel;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.SftpException;
import java.util.Properties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jcraft.jsch.JSch;

@RestController
public class RacetracShipmentController {
	private static final Logger log = LoggerFactory.getLogger(RacetracShipmentController.class);
	 
    @GetMapping("/testFTPSConnection")
    public void testFTPSConnection() {
    	 String host = "sftp.racetrac.com";
         int port = 22;
         String user = "strtsftpprodeastus001.wdoutboundint.wdoutboundint";
         String pass = "WH6tS6qy61hq+TK0gTi1KZwPy7L3Q4XI";

         Session session = null;
         Channel channel = null;

         try {
             JSch jsch = new JSch();
             session = jsch.getSession(user, host, port);
             session.setPassword(pass);

             // Disable host key checking for testing
             Properties config = new Properties();
             config.put("StrictHostKeyChecking", "no");
             session.setConfig(config);

             log.info("Connecting to SFTP server...");
             session.connect();
             log.info("‚úÖ Connected to SFTP server!");

             channel = session.openChannel("sftp");
             channel.connect();

             ChannelSftp sftpChannel = (ChannelSftp) channel;

             // Example: List files in root directory
             sftpChannel.ls(".").forEach(entry -> log.info("Found file: {}", entry));

             // Always cleanup
             sftpChannel.exit();
             session.disconnect();
             log.info("üîå Disconnected from SFTP server");

         } catch (JSchException | SftpException e) {
             log.error("‚ùå SFTP connection failed: {}", e.getMessage(), e);
         } finally {
             if (channel != null && channel.isConnected()) {
                 channel.disconnect();
             }
             if (session != null && session.isConnected()) {
                 session.disconnect();
             }
         }
     }
    
    @GetMapping("/readJsonFromSftp")
    public void readJsonFromSftp() {
        String host = "sftp.racetrac.com"; // Replace with your actual SFTP host
        int port = 22;
        String user = "strtsftpprodeastus001.wdoutboundint.wdoutboundint";
        String password = "WH6tS6qy61hq+TK0gTi1KZwPy7L3Q4XI";
        String remoteDir = "/Generic/LegacyEDI/Inventory/V4";

        Session session = null;
        ChannelSftp channelSftp = null;

        try {JSch jsch = new JSch();
        session = jsch.getSession(user, host, port);
        session.setPassword(password);

        // Avoid host key checking (for testing/dev only)
        Properties config = new Properties();
        config.put("StrictHostKeyChecking", "no");
        session.setConfig(config);

        session.connect();

        Channel channel = session.openChannel("sftp");
        channel.connect();
        channelSftp = (ChannelSftp) channel;

        channelSftp.cd(remoteDir);
        Vector<ChannelSftp.LsEntry> files = channelSftp.ls("*.json");

        for (ChannelSftp.LsEntry entry : files) { String filename = entry.getFilename();
        if (filename.contains("inventory-v4")) {
            try (InputStream inputStream = channelSftp.get(filename)) {
                String jsonContent = new BufferedReader(new InputStreamReader(inputStream))
                        .lines()
                        .collect(Collectors.joining("\n"));

                System.out.println("‚úÖ JSON file content:\n" + jsonContent);
            }
            break; // Process only the first matching file
        }
    }

} catch (Exception e) {
    e.printStackTrace();
} finally {
    if (channelSftp != null && channelSftp.isConnected()) {  channelSftp.disconnect();
    }
    if (session != null && session.isConnected()) {
        session.disconnect();
    }
}
}

    }

